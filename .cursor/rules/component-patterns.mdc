# Component Patterns

## Component Structure

- Use named exports for all components
- Follow kebab-case for component file names
- Use PascalCase for component function names

```tsx
// Good: user-card.tsx
export function UserCard({ user }: UserCardProps) {
  return <div>...</div>
}

// Export types alongside components
export type UserCardProps = {
  user: User
}
```

## Form Components

- Use React Hook Form with Zod validation
- Create dedicated form components in feature `components/` folders
- Follow this pattern for form components:

```tsx
export function ExampleForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {...}
  })

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        {/* Form fields */}
      </form>
    </Form>
  )
}
```

## Table Components

- Use data tables with columns defined in separate files
- Table columns go in `table/columns.tsx`
- Data table component goes in `table/data-table.tsx`
- Use TanStack Table for complex data tables

## Dialog and Modal Components

- Use Shadcn Dialog components
- Create wrapper components like `DialogFormWithScroll` for consistent behavior
- Place dialog components in feature-specific `components/` folders

## Server vs Client Components

- Default to Server Components when possible
- Use `"use client"` directive only when needed for:
  - Event handlers
  - State management
  - Browser APIs
  - Third-party libraries requiring client-side rendering

## Component Composition

- Prefer composition over complex prop interfaces
- Use children prop for flexible layouts
- Create layout components for consistent structure
  description:
  globs:
  alwaysApply: false

---
